1. Difference between npm and npx in React?
A. npm:
-->npm is a tool mainly used to install packages.
-->npm is package manager.
-->npm create-react-app my-app executes the local create-react-app package from your machine, so you first have to install it globally on your system with npm install 
-g create-react-app.
   npx:
-->npx is a tool to execute packages.
-->npx is package runner.
-->If you run npx create-react-app my-app and don’t have create-react-app globally on your system, it will get downloaded and not installed globally. 
This is great if you don’t want to pollute your system with global packages that you only run once every two months.

2. How to change the react application port (default port=3000)?
-->By default, a ReactJS app runs on port 3000. An Express.js app also runs on the same port 3000. If you were to run the two apps simultaneously,
there would be conflicts. You need to change the port of one of them.
-->In ReactJS, the easiest way to alter the port number is by setting an environment variable named PORT to the desired number via the terminal.
 As an example, here we change the port number to 5000.
$env:PORT=5000
npm start

3. Explain the Execution flow of a React App?
A. These are the life cycle methods
1. Initial Render
2. Props Change
3. State Change
4. Component Unmount



4. What is strict mode in ReacJS?
A. -->StrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render
any visible UI. It activates additional checks and warnings for its descendants.
   -->All you need to do in order to enable StrictMode (from version 16.3) is to wrap the part you want in your app with <React.StrictMode>.
You can wrap the whole app or only specific nodes.
 
5. What are ReactJS fragments?
A. A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.
render() {
  return (
    <React.Fragment>
      <ChildA />
      <ChildB />
      <ChildC />
    </React.Fragment>
  );
}
Keyed Fragments:
-->Fragments declared with the explicit <React.Fragment> syntax may have keys. A use case for this is mapping a collection to an array of fragments.
-->for example, to create a description list: key is the only attribute that can be passed to Fragment. In the future, we may add support for additional
 attributes, such as event handlers.
function Glossary(props) {
  return (
    <dl>
      {props.items.map(item => (
        // Without the `key`, React will fire a key warning
        <React.Fragment key={item.id}>
          <dt>{item.term}</dt>
          <dd>{item.description}</dd>
        </React.Fragment>
      ))}
    </dl>
  );
}

